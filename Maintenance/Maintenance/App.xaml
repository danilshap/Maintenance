<Application x:Class="Maintenance.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Maintenance"
             xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:controlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf"
             StartupUri="MainWindow.xaml"
             Startup="App_OnStartup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/materialdesigncolor.amber.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/materialdesigncolor.red.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--
            Для PropBox с работой клиент-серверного приложения
            Пример кода: https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/blob/master/MaterialDesignThemes.Wpf/Themes/MaterialDesignTheme.PopupBox.xaml
            -->

            <wpf:NullableToVisibilityConverter x:Key="NullVisibilityConverter" />
            <wpf:NullableToVisibilityConverter x:Key="InvertedNullVisibilityConverter" NullValue="Visible" NotNullValue="Collapsed" />
            <wpf:BrushRoundConverter x:Key="BrushRoundConverter"/>

            <wpf:PackIcon x:Shared="False" x:Key="MaterialDesignMultiFloatingActionPopupBoxIcon"
                          Kind="Plus" Width="24" Height="24" Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=Foreground}" />

            <Style TargetType="{x:Type wpf:PopupBox}" x:Key="MaterialDesignMultiFloatingActionPopupBox">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="wpf:RippleAssist.Feedback" Value="White" />
                <Setter Property="PlacementMode" Value="TopAndAlignCentres" />
                <Setter Property="PopupMode" Value="MouseOverEager" />
                <Setter Property="ToolTipService.Placement" Value="Left" />
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth2" />
                <Setter Property="Width" Value="56" />
                <Setter Property="Height" Value="56" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type wpf:PopupBox}">
                            <ControlTemplate.Resources>
                                <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MaterialDesignToolTip}">
                                    <Style.Setters>
                                        <Setter Property="Margin" Value="8 10 8 10" />
                                    </Style.Setters>
                                </Style>
                                <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Grid x:Name="RootGrid" Background="{x:Null}">
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup Name="CheckedStates">
                                                            <VisualStateGroup.Transitions>
                                                                <VisualTransition From="*" To="Checked">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="45"
                                                                                 Duration="0:0:0.1">
                                                                            <DoubleAnimation.EasingFunction>
                                                                                <QuadraticEase EasingMode="EaseInOut" />
                                                                            </DoubleAnimation.EasingFunction>
                                                                        </DoubleAnimation>
                                                                    </Storyboard>
                                                                </VisualTransition>
                                                                <VisualTransition From="Checked" To="Unchecked">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="0"
                                                                                 Duration="0:0:0.1">
                                                                            <DoubleAnimation.EasingFunction>
                                                                                <QuadraticEase EasingMode="EaseInOut" />
                                                                            </DoubleAnimation.EasingFunction>
                                                                        </DoubleAnimation>
                                                                    </Storyboard>
                                                                </VisualTransition>
                                                            </VisualStateGroup.Transitions>
                                                            <VisualState x:Name="Checked">
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="45"
                                                                             Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unchecked">
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="0"
                                                                             Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                                                        <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                                         Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static wpf:ShadowConverter.Instance}}"
                                                         x:Name="border">
                                                        </Ellipse>
                                                    </AdornerDecorator>
                                                    <wpf:Ripple Focusable="False"  
                                                        Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                                        wpf:RippleAssist.IsCentered="True"
                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Padding="{TemplateBinding Padding}"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                        <!-- additional layer so we don't rotate the ripple directly which can cause jumpyness under certain layouts -->
                                                        <ContentControl Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                RenderTransformOrigin=".5,.5" Focusable="False">
                                                            <ContentControl.RenderTransform>
                                                                <RotateTransform x:Name="ContentRotateTransform" Angle="0" />
                                                            </ContentControl.RenderTransform>
                                                        </ContentControl>
                                                    </wpf:Ripple>
                                                    <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="false">
                                                        <Setter Property="Opacity" Value="0.23"/>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static wpf:PopupBoxPopupMode.MouseOver}">
                                                        <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static wpf:PopupBoxPopupMode.MouseOverEager}">
                                                        <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                                <Storyboard x:Key="Open">
                                    <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                                <Storyboard x:Key="Close">
                                    <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.8">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" 
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"                                      
                                      Cursor="Hand"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsTabStop="{TemplateBinding IsTabStop}"
                                      VerticalAlignment="Stretch"
                                      HorizontalAlignment="Stretch"
                                      ToolTip="{TemplateBinding ToolTip}"
                                      ToolTipService.Placement="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(ToolTipService.Placement)}">
                                    <Grid>
                                        <ContentControl x:Name="StandardToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource InvertedNullVisibilityConverter}}" Focusable="False"/>
                                        <ContentControl x:Name="ExplicitToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}" Focusable="False"/>
                                        <ContentControl x:Name="ExplicitToggleCheckedContent" Content="{TemplateBinding ToggleCheckedContent}" ContentTemplate="{TemplateBinding ToggleCheckedContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}"
                                                Opacity="0"
                                                RenderTransformOrigin=".5,.5"
                                                Focusable="False">
                                            <ContentControl.RenderTransform>
                                                <RotateTransform Angle="-45" />
                                            </ContentControl.RenderTransform>
                                        </ContentControl>
                                    </Grid>
                                </ToggleButton>
                                <controlzEx:PopupEx x:Name="PART_Popup" 
                                          IsOpen="False"
                                          CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                                          PlacementTarget="{Binding ElementName=PART_Toggle}"
                                          Placement="Custom"
                                          PopupAnimation="None"
                                          AllowsTransparency="True">
                                    <Grid>
                                        <Border Background="White" Opacity="0.002" />
                                        <ContentControl Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"      
                                                Visibility="{TemplateBinding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                Margin="5" Padding="8"
                                                Opacity="0" x:Name="PART_PopupContentControl">
                                            <ContentControl.Resources>
                                                <ResourceDictionary>
                                                    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MaterialDesignToolTip}">
                                                        <Style.Setters>
                                                            <Setter Property="Margin" Value="16 4 16 4" />
                                                        </Style.Setters>
                                                    </Style>
                                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniLightButton}">
                                                        <Style.Setters>
                                                            <Setter Property="ToolTipService.Placement" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(ToolTipService.Placement)}"/>
                                                            <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
                                                            <Setter Property="Margin" Value="4" />
                                                        </Style.Setters>
                                                    </Style>
                                                </ResourceDictionary>
                                            </ContentControl.Resources>
                                        </ContentControl>
                                    </Grid>
                                </controlzEx:PopupEx>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPopupOpen" Value="True">
                                    <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource Open}" />
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource Close}" />
                                    </Trigger.ExitActions>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="PopupMode" Value="MouseOverEager" />
                                        <Condition Property="IsVisible" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ToggleContent" Value="{StaticResource MaterialDesignMultiFloatingActionPopupBoxIcon}" />
                <Style.Triggers>
                    <Trigger Property="UnfurlOrientation" Value="Horizontal">
                        <Setter Property="ToolTipService.Placement" Value="Custom" />
                    </Trigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>


    </Application.Resources>
</Application>
